{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl320\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)\
    Create a spreadsheet-style pivot table as a DataFrame. The levels in\
    the pivot table will be stored in MultiIndex objects (hierarchical\
    indexes) on the index and columns of the result DataFrame.\
    \
    Parameters\
    ----------\
    values : column to aggregate, optional\
    index : column, Grouper, array, or list of the previous\
        If an array is passed, it must be the same length as the data. The\
        list can contain any of the other types (except list).\
        Keys to group by on the pivot table index.  If an array is passed,\
        it is being used as the same manner as column values.\
    columns : column, Grouper, array, or list of the previous\
        If an array is passed, it must be the same length as the data. The\
        list can contain any of the other types (except list).\
        Keys to group by on the pivot table column.  If an array is passed,\
        it is being used as the same manner as column values.\
    aggfunc : function, list of functions, dict, default numpy.mean\
        If list of functions passed, the resulting pivot table will have\
        hierarchical columns whose top level are the function names\
        (inferred from the function objects themselves)\
        If dict is passed, the key is column to aggregate and value\
        is function or list of functions\
    fill_value : scalar, default None\
        Value to replace missing values with\
    margins : boolean, default False\
        Add all row / columns (e.g. for subtotal / grand totals)\
    dropna : boolean, default True\
        Do not include columns whose entries are all NaN\
    margins_name : string, default 'All'\
        Name of the row / column that will contain the totals\
        when margins is True.\
    observed : boolean, default False\
        This only applies if any of the groupers are Categoricals.\
        If True: only show observed values for categorical groupers.\
        If False: show all values for categorical groupers.\
    \
        .. versionchanged :: 0.25.0\
    \
    Returns\
    -------\
    DataFrame\
    \
    See Also\
    --------\
    DataFrame.pivot : Pivot without aggregation that can handle\
        non-numeric data.\
    \
    Examples\
    --------\
    >>> df = pd.DataFrame(\{"A": ["foo", "foo", "foo", "foo", "foo",\
    ...                          "bar", "bar", "bar", "bar"],\
    ...                    "B": ["one", "one", "one", "two", "two",\
    ...                          "one", "one", "two", "two"],\
    ...                    "C": ["small", "large", "large", "small",\
    ...                          "small", "large", "small", "small",\
    ...                          "large"],\
    ...                    "D": [1, 2, 2, 3, 3, 4, 5, 6, 7],\
    ...                    "E": [2, 4, 5, 5, 6, 6, 8, 9, 9]\})\
    >>> df\
         A    B      C  D  E\
    0  foo  one  small  1  2\
    1  foo  one  large  2  4\
    2  foo  one  large  2  5\
    3  foo  two  small  3  5\
    4  foo  two  small  3  6\
    5  bar  one  large  4  6\
    6  bar  one  small  5  8\
    7  bar  two  small  6  9\
    8  bar  two  large  7  9\
    \
    This first example aggregates values by taking the sum.\
    \
    >>> table = pd.pivot_table(df, values='D', index=['A', 'B'],\
    ...                     columns=['C'], aggfunc=np.sum)\
    >>> table\
    C        large  small\
    A   B\
    bar one    4.0    5.0\
        two    7.0    6.0\
    foo one    4.0    1.0\
        two    NaN    6.0\
    \
    We can also fill missing values using the `fill_value` parameter.\
    \
    >>> table = pd.pivot_table(df, values='D', index=['A', 'B'],\
    ...                     columns=['C'], aggfunc=np.sum, fill_value=0)\
    >>> table\
    C        large  small\
    A   B\
    bar one      4      5\
        two      7      6\
    foo one      4      1\
        two      0      6\
    \
    The next example aggregates by taking the mean across multiple columns.\
    \
    >>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\
    ...                     aggfunc=\{'D': np.mean,\
    ...                              'E': np.mean\})\
    >>> table\
                    D         E\
    A   C\
    bar large  5.500000  7.500000\
        small  5.500000  8.500000\
    foo large  2.000000  4.500000\
        small  2.333333  4.333333\
    \
    We can also calculate multiple types of aggregations for any given\
    value column.\
    \
    >>> table = pd.pivot_table(df, values=['D', 'E'], index=['A', 'C'],\
    ...                     aggfunc=\{'D': np.mean,\
    ...                              'E': [min, max, np.mean]\})\
    >>> table\
                    D    E\
                mean  max      mean  min\
    A   C\
    bar large  5.500000  9.0  7.500000  6.0\
        small  5.500000  9.0  8.500000  8.0\
    foo large  2.000000  5.0  4.500000  4.0\
        small  2.333333  6.0  4.333333  2.0\
}