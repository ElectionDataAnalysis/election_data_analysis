{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl320\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 groupby(self, by=None, axis=0, level=None, as_index=True, sort=True, group_keys=True, squeeze=False, observed=False, **kwargs)\
    Group DataFrame or Series using a mapper or by a Series of columns.\
    \
    A groupby operation involves some combination of splitting the\
    object, applying a function, and combining the results. This can be\
    used to group large amounts of data and compute operations on these\
    groups.\
    \
    Parameters\
    ----------\
    by : mapping, function, label, or list of labels\
        Used to determine the groups for the groupby.\
        If ``by`` is a function, it's called on each value of the object's\
        index. If a dict or Series is passed, the Series or dict VALUES\
        will be used to determine the groups (the Series' values are first\
        aligned; see ``.align()`` method). If an ndarray is passed, the\
        values are used as-is determine the groups. A label or list of\
        labels may be passed to group by the columns in ``self``. Notice\
        that a tuple is interpreted as a (single) key.\
    axis : \{0 or 'index', 1 or 'columns'\}, default 0\
        Split along rows (0) or columns (1).\
    level : int, level name, or sequence of such, default None\
        If the axis is a MultiIndex (hierarchical), group by a particular\
        level or levels.\
    as_index : bool, default True\
        For aggregated output, return object with group labels as the\
        index. Only relevant for DataFrame input. as_index=False is\
        effectively "SQL-style" grouped output.\
    sort : bool, default True\
        Sort group keys. Get better performance by turning this off.\
        Note this does not influence the order of observations within each\
        group. Groupby preserves the order of rows within each group.\
    group_keys : bool, default True\
        When calling apply, add group keys to index to identify pieces.\
    squeeze : bool, default False\
        Reduce the dimensionality of the return type if possible,\
        otherwise return a consistent type.\
    observed : bool, default False\
        This only applies if any of the groupers are Categoricals.\
        If True: only show observed values for categorical groupers.\
        If False: show all values for categorical groupers.\
    \
        .. versionadded:: 0.23.0\
    \
    **kwargs\
        Optional, only accepts keyword argument 'mutated' and is passed\
        to groupby.\
    \
    Returns\
    -------\
    DataFrameGroupBy or SeriesGroupBy\
        Depends on the calling object and returns groupby object that\
        contains information about the groups.\
    \
    See Also\
    --------\
    resample : Convenience method for frequency conversion and resampling\
        of time series.\
    \
    Notes\
    -----\
    See the `user guide\
    <http://pandas.pydata.org/pandas-docs/stable/groupby.html>`_ for more.\
    \
    Examples\
    --------\
    >>> df = pd.DataFrame(\{'Animal': ['Falcon', 'Falcon',\
    ...                               'Parrot', 'Parrot'],\
    ...                    'Max Speed': [380., 370., 24., 26.]\})\
    >>> df\
       Animal  Max Speed\
    0  Falcon      380.0\
    1  Falcon      370.0\
    2  Parrot       24.0\
    3  Parrot       26.0\
    >>> df.groupby(['Animal']).mean()\
            Max Speed\
    Animal\
    Falcon      375.0\
    Parrot       25.0\
    \
    **Hierarchical Indexes**\
    \
    We can groupby different levels of a hierarchical index\
    using the `level` parameter:\
    \
    >>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\
    ...           ['Captive', 'Wild', 'Captive', 'Wild']]\
    >>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\
    >>> df = pd.DataFrame(\{'Max Speed': [390., 350., 30., 20.]\},\
    ...                   index=index)\
    >>> df\
                    Max Speed\
    Animal Type\
    Falcon Captive      390.0\
           Wild         350.0\
    Parrot Captive       30.0\
           Wild          20.0\
    >>> df.groupby(level=0).mean()\
            Max Speed\
    Animal\
    Falcon      370.0\
    Parrot       25.0\
    >>> df.groupby(level=1).mean()\
             Max Speed\
    Type\
    Captive      210.0\
    Wild         185.0\
}